#version 450 core

#define PI 3.14159265

layout (local_size_x = 128) in;

layout (std430, binding = 0) buffer coordinate_block
{
    float coordinate[];
};

layout(std430, binding = 1) buffer velocity_block
{
    float velocity[];
};

layout(std430, binding = 2) buffer mass_block
{
    float mass[];
};

layout(std430, binding = 3) buffer param_block
{
    float timePerFrame;
    float numberOfPerticles;
    float GConstant;
    float vangleInv;
};

float atan2(in float y, in float x)
{
    return x == 0.0 ? sign(y) * PI / 2.0 : atan(y, x);
}

vec3 LnV3(in vec4 qua)
{
    vec3 im = vec3(qua.x, qua.y, qua.z);
    float n = length(im);
    if (n == 0.0)
        return vec3(0.0, 0.0, 0.0);
    n = atan2(n, qua.w) / n;
    return vec3(qua.x * n, qua.y * n, qua.z * n);
}

vec4 Ln(in vec4 qua)
{
    vec3 im = vec3(qua.x, qua.y, qua.z);
    float n = length(im);
    if (n == 0.0)
        return vec4(0.0, 0.0, 0.0, 0.0);
    float theta = atan2(n, qua.w);
    n = theta / n;
    return vec4(qua.x * n, qua.y * n, qua.z * n, theta);
}

vec3 LnV3Half(in vec4 qua)
{
    vec3 im = vec3(qua.x, qua.y, qua.z);
    float v = length(im);
    if (v == 0.0)
        return vec3(0.0, 0.0, 0.0);
    float a;
    if (qua.w == 0.0)
        a = PI / 2.0;
    else
        a = atan(v / qua.w) / v;
    return vec3(qua.x * a, qua.y * a, qua.z * a);
}

void main()
{
    const uint i = gl_GlobalInvocationID.x;

    // for debug
    //if (i == 0) return;

    uint i3 = i * 3;
    uint i4 = i * 4;

    vec4 vq = vec4(velocity[i4 + 1], velocity[i4 + 2], velocity[i4 + 3], velocity[i4]);

    vec3 vv3 = LnV3(vq);
    vec3 add = vv3 * vangleInv * timePerFrame;

    coordinate[i3    ] += add.x;
    coordinate[i3 + 1] += add.y;
    coordinate[i3 + 2] += add.z;
}
