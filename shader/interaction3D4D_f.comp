#version 450 core

layout (local_size_x = 128) in;

layout (std430, binding = 0) buffer coordinate_block
{
    float coordinate[];
};

layout(std430, binding = 1) buffer velocity_block
{
    float velocity[];
};

layout(std430, binding = 2) buffer mass_block
{
    float mass[];
};

layout(std430, binding = 3) buffer param_block
{
    float timePerFrame;
    float numberOfPerticles;
    float GConstant;
    float vangleInv;
    float vangleHalf;
    float boundaryToInvalidate;
};

vec4 MakeRotation(in float x, in float y, in float z, in float theta)
{
    vec4 qua;
    float s;
    if (theta > 0.01)
    {
        qua.w = cos(theta);
        s = sin(theta);
    } else {
        qua.w = 1.0 - 0.5 * theta * theta;
        s = theta;
    }
    qua.x = x * s;
    qua.y = y * s;
    qua.z = z * s;
    return qua;
}

void Rot8(inout vec4 qua, in vec4 rot)
{
    float q0 = (rot.w * qua.w - rot.x * qua.x - rot.y * qua.y - rot.z * qua.z) * rot.w
            - (rot.w * qua.x + rot.x * qua.w + rot.y * qua.z - rot.z * qua.y) * rot.x
            - (rot.w * qua.y - rot.x * qua.z + rot.y * qua.w + rot.z * qua.x) * rot.y
            - (rot.w * qua.z + rot.x * qua.y - rot.y * qua.x + rot.z * qua.w) * rot.z;
    float q1 = (rot.w * qua.w - rot.x * qua.x - rot.y * qua.y - rot.z * qua.z) * rot.x
            + (rot.w * qua.x + rot.x * qua.w + rot.y * qua.z - rot.z * qua.y) * rot.w
            - (rot.w * qua.y - rot.x * qua.z + rot.y * qua.w + rot.z * qua.x) * rot.z
            + (rot.w * qua.z + rot.x * qua.y - rot.y * qua.x + rot.z * qua.w) * rot.y;
    float q2 = (rot.w * qua.w - rot.x * qua.x - rot.y * qua.y - rot.z * qua.z) * rot.y
            + (rot.w * qua.x + rot.x * qua.w + rot.y * qua.z - rot.z * qua.y) * rot.z
            + (rot.w * qua.y - rot.x * qua.z + rot.y * qua.w + rot.z * qua.x) * rot.w
            - (rot.w * qua.z + rot.x * qua.y - rot.y * qua.x + rot.z * qua.w) * rot.x;
    float q3 = (rot.w * qua.w - rot.x * qua.x - rot.y * qua.y - rot.z * qua.z) * rot.z
            - (rot.w * qua.x + rot.x * qua.w + rot.y * qua.z - rot.z * qua.y) * rot.y
            + (rot.w * qua.y - rot.x * qua.z + rot.y * qua.w + rot.z * qua.x) * rot.x
            + (rot.w * qua.z + rot.x * qua.y - rot.y * qua.x + rot.z * qua.w) * rot.w;
    qua.x = q1;
    qua.y = q2;
    qua.z = q3;
    qua.w = q0;
}

void Product(inout vec4 a, in vec4 b)
{
    float q0 = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
    float q1 = a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y;
    float q2 = a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x;
    float q3 = a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w;
    a.x = q1;
    a.y = q2;
    a.z = q3;
    a.w = q0;
}

vec4 Exp(in float x, in float y, in float z)
{
    float n = sqrt(x * x + y * y + z * z);
    float a;
    if (n == 0.0)
        a = 0.0;
    else
        a = sin(n) / n;
    return vec4(x * a, y * a, z * a, cos(n));
}

void main()
{
    const uint i = gl_GlobalInvocationID.x;
    uint num = uint(numberOfPerticles);
    float time_g = timePerFrame * GConstant;
    uint a = i * 3;
    uint b;
    float d1, d2, d3;
    float r, inv, theta;

    float total_x = 0.0;
    float total_y = 0.0;
    float total_z = 0.0;

    for (int j = 0; j < num; ++j)
    {
        if (i == j)
            continue;

        b = j * 3;

        d1 = coordinate[b    ] - coordinate[a    ];
        d2 = coordinate[b + 1] - coordinate[a + 1];
        d3 = coordinate[b + 2] - coordinate[a + 2];

        r = sqrt(d1 * d1 + d2 * d2 + d3 * d3);
        if (r <= boundaryToInvalidate)
            continue;

        inv = 1.0 / r;
        theta = inv * inv * inv * time_g * mass[j];

        d1 *= theta;
        d2 *= theta;
        d3 *= theta;

        total_x += d1;
        total_y += d2;
        total_z += d3;
    }
    a = i * 4;

    r = sqrt(total_x * total_x + total_y * total_y + total_z * total_z);
    if (r <= 0.0)
        return;

    total_x /= r;
    total_y /= r;
    total_z /= r;
    vec4 acc = MakeRotation(total_x, total_y, total_z, r * vangleHalf);

    // for degub
    // if (i == 0)
    // {
        // coordinate[0] = acc.w;
        // coordinate[1] = 0.0;
        // coordinate[2] = 0.0;
    // }

    vec4 va;
    va.x = velocity[a + 1];
    va.y = velocity[a + 2];
    va.z = velocity[a + 3];
    va.w = velocity[a];

    Rot8(va, acc);

    velocity[a + 1] = va.x;
    velocity[a + 2] = va.y;
    velocity[a + 3] = va.z;
    velocity[a] = va.w;
}
